/*
 * Intel ACPI Component Architecture
 * AML Disassembler version 20121018-64 [Oct 26 2012]
 * Copyright (c) 2000 - 2012 Intel Corporation
 * 
 * Disassembly of SSDT1.dat, Sat Nov 10 15:53:41 2012
 *
 * Original Table Header:
 *     Signature        "SSDT"
 *     Length           0x000010DE (4318)
 *     Revision         0x01
 *     Checksum         0x0C
 *     OEM ID           "NvdRef"
 *     OEM Table ID     "NvdTabl"
 *     OEM Revision     0x00001000 (4096)
 *     Compiler ID      "INTL"
 *     Compiler Version 0x20050624 (537200164)
 */

DefinitionBlock ("SSDT1.aml", "SSDT", 1, "NvdRef", "NvdTabl", 0x00001000)
{
    External (\_SB_.PCI0.GFX0, DeviceObj)
    External (\_SB_.PCI0.LPCB.EC__.DLED)
    External (\_SB_.PCI0.LPCB.EC__.ECOK, IntObj)
    External (\_SB_.PCI0.LPCB.EC__.FCMD)
    External (\_SB_.PCI0.LPCB.EC__.FDAT)
    External (\_SB_.PCI0.LPCB.EC__.RINF)
    External (\_SB_.PCI0.P0P2, DeviceObj)
    External (\_SB_.PCI0.P0P2.PEGP, DeviceObj)
    External (\_SB_.WMI_)
    External (\_SB_.WMI_.EVNT)
    External (\NVID)
    External (\OEMF)
    External (NVHA, MethodObj)    // 1 Arguments
    External (P80H)

    Scope (\_SB.PCI0.P0P2)
    {
        OperationRegion (RPCI, SystemMemory, 0xE0008000, 0x1000)
        Field (RPCI, DWordAcc, Lock, Preserve)
        {
            Offset (0x8C), 
            SVID,   16, 
            SSID,   16, 
            Offset (0xB0), 
            ASPM,   2, 
                ,   2, 
            LNKD,   1, 
                ,   1, 
            RCCC,   1, 
            Offset (0xBA), 
                ,   6, 
            PDSF,   1, 
            Offset (0x1FC), 
                ,   9, 
            SGL1,   1, 
            Offset (0x214), 
            Offset (0x216), 
            LNKS,   4, 
            Offset (0x224), 
            Offset (0x225), 
            DQDA,   1, 
            Offset (0xC28), 
            HCLQ,   1, 
            Offset (0xC34), 
                ,   30, 
            PEDQ,   1, 
            PIDQ,   1, 
            Offset (0xDFC), 
            PEPO,   3, 
            Offset (0xE08), 
                ,   31, 
            ROE0,   1, 
            Offset (0xE28), 
                ,   31, 
            ROE1,   1, 
            Offset (0xE48), 
                ,   31, 
            ROE2,   1, 
            Offset (0xE68), 
                ,   31, 
            ROE3,   1, 
            Offset (0xE88), 
                ,   31, 
            ROE4,   1, 
            Offset (0xEA8), 
                ,   31, 
            ROE5,   1, 
            Offset (0xEC8), 
                ,   31, 
            ROE6,   1, 
            Offset (0xEE8), 
                ,   31, 
            ROE7,   1, 
            Offset (0xF08), 
                ,   31, 
            ROE8,   1, 
            Offset (0xF28), 
                ,   31, 
            ROE9,   1, 
            Offset (0xF48), 
                ,   31, 
            ROEA,   1, 
            Offset (0xF68), 
                ,   31, 
            ROEB,   1, 
            Offset (0xF88), 
                ,   31, 
            ROEC,   1, 
            Offset (0xFA8), 
                ,   31, 
            ROED,   1, 
            Offset (0xFC8), 
                ,   31, 
            ROEE,   1, 
            Offset (0xFE8), 
                ,   31, 
            ROEF,   1
        }

        OperationRegion (NVGA, SystemMemory, 0xE0100000, 0x1000)
        Field (NVGA, DWordAcc, Lock, Preserve)
        {
            X000,   32, 
            X004,   32, 
            X008,   32, 
            X00C,   32, 
            X010,   32, 
            X014,   32, 
            X018,   32, 
            X01C,   32, 
            X020,   32, 
            X024,   32, 
            X028,   32, 
            X02C,   32, 
            X030,   32, 
            X034,   32, 
            X038,   32, 
            X03C,   32, 
            X040,   32, 
            Offset (0x48), 
            Offset (0x4C), 
            X04C,   32, 
            X050,   32, 
            Offset (0x80), 
            X080,   32, 
            Offset (0x88), 
            X088,   2, 
                ,   3, 
                ,   1, 
            ECCC,   1, 
            Offset (0x8A), 
            Offset (0x8B), 
                ,   4, 
            ESCC,   1, 
            Offset (0x114), 
            TCVC,   8, 
            Offset (0x488), 
                ,   25, 
            NHDA,   1
        }

        OperationRegion (NVAU, SystemMemory, 0xE0101000, 0x80)
        Field (NVAU, DWordAcc, Lock, Preserve)
        {
            NVID,   32
        }

        OperationRegion (DMIB, SystemMemory, 0xFED18000, 0x1000)
        Field (DMIB, DWordAcc, Lock, Preserve)
        {
            Offset (0xC34), 
            LLGE,   1, 
                ,   28, 
            PCGE,   1, 
                ,   1, 
            LGGE,   1
        }

        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            Return (0x0F)
        }
    }

    Scope (\_SB.PCI0.P0P2.PEGP)
    {
        Name (BAR0, Zero)
        Name (BAR1, Zero)
        Name (BAR2, Zero)
        Name (BAR3, Zero)
        Name (SDID, Zero)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            Store (X010, BAR0)
            Store (X014, BAR1)
            Store (X01C, BAR2)
            Store (X024, BAR3)
            Store (X040, SDID)
        }

        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            Return (0x0F)
        }

        OperationRegion (NVVB, SystemMemory, NVHA (0x00010000), Field (NVVB, AnyAcc, NoLock, Preserve)
            {
                VBBF,   65536
            })
        Method (_ROM, 2, NotSerialized)  // _ROM: Read-Only Memory
        {
            Store (Arg0, Local0)
            Store (Arg1, Local1)
            If (LGreater (Local1, 0x1000))
            {
                Store (0x1000, Local1)
            }

            If (LGreater (Local0, 0x00010000))
            {
                Return (Buffer (Local1)
                {
                     0x00
                })
            }

            Multiply (Local0, 0x08, Local2)
            Multiply (Local1, 0x08, Local3)
            Name (WROM, Buffer (0x00010000)
            {
                 0x00
            })
            Name (VROM, Buffer (Local1)
            {
                 0x00
            })
            Store (VBBF, WROM)
            CreateField (WROM, Local2, Local3, TMPB)
            Store (TMPB, VROM)
            Return (VROM)
        }

        Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
        {
            Return (\_SB.PCI0.GFX0._DSM (Arg0, Arg1, Arg2, Arg3))
        }

        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            If (LAnd (\_SB.PCI0.LPCB.EC.ECOK, And (\OEMF, 0x10)))
            {
                Store (0xCB, P80H)
                If (LEqual (And (\_SB.PCI0.LPCB.EC.RINF, 0x02), Zero))
                {
                    Store (One, \_SB.PCI0.LPCB.EC.FDAT)
                    Store (0xBF, \_SB.PCI0.LPCB.EC.FCMD)
                    Sleep (0xFA)
                    Store (Zero, DQDA)
                    Sleep (0x64)
                    Store (0x00100104, X004)
                    Store (Zero, NHDA)
                    Store (0x030000A2, X008)
                    Store (0x00800010, X00C)
                    Store (BAR0, X010)
                    Store (BAR1, X014)
                    Store (Zero, X018)
                    Store (BAR2, X01C)
                    Store (Zero, X020)
                    Store (BAR3, X024)
                    Store (Zero, X028)
                    Store (Zero, X030)
                    Store (0x60, X034)
                    Store (Zero, X038)
                    Store (0x0110, X03C)
                    Store (SDID, X040)
                    Store (One, X050)
                    Store (One, TCVC)
                    If (LEqual (ESCC, One))
                    {
                        Store (One, ECCC)
                        Store (One, RCCC)
                    }

                    Or (X004, 0x02, X004)
                }

                If (And (\OEMF, 0x40))
                {
                    Store (One, \_SB.PCI0.LPCB.EC.DLED)
                    Store (0xED, \_SB.WMI.EVNT)
                    Notify (\_SB.WMI, 0xD0)
                }
            }
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            If (LAnd (\_SB.PCI0.GFX0.OPD3, And (\OEMF, 0x10)))
            {
                If (\_SB.PCI0.LPCB.EC.ECOK)
                {
                    Store (0xCA, P80H)
                    If (And (\_SB.PCI0.LPCB.EC.RINF, 0x02))
                    {
                        Store (Zero, \_SB.PCI0.LPCB.EC.FDAT)
                        Store (0xBF, \_SB.PCI0.LPCB.EC.FCMD)
                        Sleep (0xC8)
                    }

                    Store (Zero, \_SB.PCI0.GFX0.OPD3)
                    If (And (\OEMF, 0x40))
                    {
                        Store (Zero, \_SB.PCI0.LPCB.EC.DLED)
                    }
                }
            }
        }
    }

    Scope (\_SB.PCI0.GFX0)
    {
        Name (OPD3, Zero)
        Name (NMOP, Buffer (0xE2)
        {
            /* 0000 */   0x37, 0x89, 0x33, 0x5A, 0xFB, 0x6D, 0x42, 0xE8,
            /* 0008 */   0x4B, 0x56, 0xE2, 0x00, 0x00, 0x00, 0x01, 0x00,
            /* 0010 */   0x32, 0x37, 0x34, 0x35, 0x39, 0x31, 0x32, 0x35,
            /* 0018 */   0x33, 0x36, 0x38, 0x37, 0x47, 0x65, 0x6E, 0x75,
            /* 0020 */   0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,
            /* 0028 */   0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,
            /* 0030 */   0x66, 0x69, 0x65, 0x64, 0x20, 0x4F, 0x70, 0x74,
            /* 0038 */   0x69, 0x6D, 0x75, 0x73, 0x20, 0x52, 0x65, 0x61,
            /* 0040 */   0x64, 0x79, 0x20, 0x4D, 0x6F, 0x74, 0x68, 0x65,
            /* 0048 */   0x72, 0x62, 0x6F, 0x61, 0x72, 0x64, 0x20, 0x66,
            /* 0050 */   0x6F, 0x72, 0x20, 0x43, 0x6C, 0x65, 0x76, 0x6F,
            /* 0058 */   0x2D, 0x42, 0x34, 0x31, 0x30, 0x30, 0x2D, 0x4E,
            /* 0060 */   0x31, 0x31, 0x4D, 0x2D, 0x4F, 0x50, 0x31, 0x20,
            /* 0068 */   0x2D, 0x20, 0x2D, 0x29, 0x40, 0x42, 0x3A, 0x4D,
            /* 0070 */   0x25, 0x35, 0x23, 0x33, 0x2C, 0x29, 0x5E, 0x5B,
            /* 0078 */   0x22, 0x2F, 0x2C, 0x40, 0x40, 0x5B, 0x3C, 0x29,
            /* 0080 */   0x26, 0x4D, 0x22, 0x28, 0x2E, 0x32, 0x5A, 0x37,
            /* 0088 */   0x25, 0x28, 0x26, 0x3C, 0x38, 0x23, 0x3E, 0x31,
            /* 0090 */   0x24, 0x40, 0x25, 0x41, 0x2C, 0x46, 0x5E, 0x28,
            /* 0098 */   0x20, 0x3D, 0x20, 0x2D, 0x20, 0x43, 0x6F, 0x70,
            /* 00A0 */   0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0x32,
            /* 00A8 */   0x30, 0x30, 0x39, 0x20, 0x4E, 0x56, 0x49, 0x44,
            /* 00B0 */   0x49, 0x41, 0x20, 0x43, 0x6F, 0x72, 0x70, 0x6F,
            /* 00B8 */   0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x41,
            /* 00C0 */   0x6C, 0x6C, 0x20, 0x52, 0x69, 0x67, 0x68, 0x74,
            /* 00C8 */   0x73, 0x20, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
            /* 00D0 */   0x65, 0x64, 0x2D, 0x32, 0x37, 0x34, 0x35, 0x39,
            /* 00D8 */   0x31, 0x32, 0x35, 0x33, 0x36, 0x38, 0x37, 0x28,
            /* 00E0 */   0x52, 0x29
        })
        Name (NPGE, Buffer (0xE2)
        {
            /* 0000 */   0xDD, 0xC9, 0x6B, 0x68, 0x20, 0x72, 0x44, 0x95,
            /* 0008 */   0x4B, 0x56, 0xE2, 0x00, 0x00, 0x00, 0x01, 0x00,
            /* 0010 */   0x32, 0x37, 0x34, 0x35, 0x39, 0x31, 0x32, 0x35,
            /* 0018 */   0x33, 0x36, 0x38, 0x37, 0x47, 0x65, 0x6E, 0x75,
            /* 0020 */   0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,
            /* 0028 */   0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,
            /* 0030 */   0x66, 0x69, 0x65, 0x64, 0x20, 0x4F, 0x70, 0x74,
            /* 0038 */   0x69, 0x6D, 0x75, 0x73, 0x20, 0x52, 0x65, 0x61,
            /* 0040 */   0x64, 0x79, 0x20, 0x4D, 0x6F, 0x74, 0x68, 0x65,
            /* 0048 */   0x72, 0x62, 0x6F, 0x61, 0x72, 0x64, 0x20, 0x66,
            /* 0050 */   0x6F, 0x72, 0x20, 0x36, 0x33, 0x38, 0x32, 0x36,
            /* 0058 */   0x37, 0x5F, 0x42, 0x35, 0x31, 0x30, 0x30, 0x4D,
            /* 0060 */   0x5F, 0x32, 0x30, 0x31, 0x30, 0x30, 0x32, 0x20,
            /* 0068 */   0x2D, 0x20, 0x41, 0x30, 0x59, 0x29, 0x46, 0x5C,
            /* 0070 */   0x36, 0x47, 0x36, 0x49, 0x27, 0x34, 0x53, 0x58,
            /* 0078 */   0x23, 0x50, 0x21, 0x47, 0x3A, 0x4E, 0x29, 0x58,
            /* 0080 */   0x57, 0x39, 0x59, 0x41, 0x41, 0x5D, 0x38, 0x54,
            /* 0088 */   0x46, 0x4D, 0x4D, 0x43, 0x22, 0x57, 0x4B, 0x21,
            /* 0090 */   0x37, 0x5F, 0x3B, 0x59, 0x26, 0x42, 0x5C, 0x28,
            /* 0098 */   0x22, 0x21, 0x20, 0x2D, 0x20, 0x43, 0x6F, 0x70,
            /* 00A0 */   0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0x32,
            /* 00A8 */   0x30, 0x30, 0x39, 0x20, 0x4E, 0x56, 0x49, 0x44,
            /* 00B0 */   0x49, 0x41, 0x20, 0x43, 0x6F, 0x72, 0x70, 0x6F,
            /* 00B8 */   0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x41,
            /* 00C0 */   0x6C, 0x6C, 0x20, 0x52, 0x69, 0x67, 0x68, 0x74,
            /* 00C8 */   0x73, 0x20, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
            /* 00D0 */   0x65, 0x64, 0x2D, 0x32, 0x37, 0x34, 0x35, 0x39,
            /* 00D8 */   0x31, 0x32, 0x35, 0x33, 0x36, 0x38, 0x37, 0x28,
            /* 00E0 */   0x52, 0x29
        })
        Name (NGE1, Buffer (0xE2)
        {
            /* 0000 */   0x67, 0xF1, 0x2F, 0x94, 0xE8, 0x3F, 0x43, 0xF2,
            /* 0008 */   0x4B, 0x56, 0xE2, 0x00, 0x00, 0x00, 0x01, 0x00,
            /* 0010 */   0x32, 0x37, 0x34, 0x35, 0x39, 0x31, 0x32, 0x35,
            /* 0018 */   0x33, 0x36, 0x38, 0x37, 0x47, 0x65, 0x6E, 0x75,
            /* 0020 */   0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,
            /* 0028 */   0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,
            /* 0030 */   0x66, 0x69, 0x65, 0x64, 0x20, 0x4F, 0x70, 0x74,
            /* 0038 */   0x69, 0x6D, 0x75, 0x73, 0x20, 0x52, 0x65, 0x61,
            /* 0040 */   0x64, 0x79, 0x20, 0x4D, 0x6F, 0x74, 0x68, 0x65,
            /* 0048 */   0x72, 0x62, 0x6F, 0x61, 0x72, 0x64, 0x20, 0x66,
            /* 0050 */   0x6F, 0x72, 0x20, 0x36, 0x35, 0x36, 0x37, 0x32,
            /* 0058 */   0x36, 0x2D, 0x43, 0x6C, 0x65, 0x76, 0x6F, 0x2D,
            /* 0060 */   0x42, 0x37, 0x31, 0x31, 0x30, 0x2D, 0x50, 0x20,
            /* 0068 */   0x2D, 0x20, 0x23, 0x2C, 0x40, 0x47, 0x34, 0x44,
            /* 0070 */   0x31, 0x45, 0x31, 0x45, 0x34, 0x4D, 0x3B, 0x38,
            /* 0078 */   0x5C, 0x46, 0x51, 0x33, 0x30, 0x4F, 0x25, 0x2F,
            /* 0080 */   0x21, 0x4D, 0x21, 0x22, 0x27, 0x45, 0x28, 0x42,
            /* 0088 */   0x31, 0x31, 0x4A, 0x5D, 0x5F, 0x47, 0x56, 0x47,
            /* 0090 */   0x57, 0x3B, 0x51, 0x48, 0x2A, 0x3A, 0x5D, 0x27,
            /* 0098 */   0x3B, 0x33, 0x20, 0x2D, 0x20, 0x43, 0x6F, 0x70,
            /* 00A0 */   0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0x32,
            /* 00A8 */   0x30, 0x30, 0x39, 0x20, 0x4E, 0x56, 0x49, 0x44,
            /* 00B0 */   0x49, 0x41, 0x20, 0x43, 0x6F, 0x72, 0x70, 0x6F,
            /* 00B8 */   0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x41,
            /* 00C0 */   0x6C, 0x6C, 0x20, 0x52, 0x69, 0x67, 0x68, 0x74,
            /* 00C8 */   0x73, 0x20, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
            /* 00D0 */   0x65, 0x64, 0x2D, 0x32, 0x37, 0x34, 0x35, 0x39,
            /* 00D8 */   0x31, 0x32, 0x35, 0x33, 0x36, 0x38, 0x37, 0x28,
            /* 00E0 */   0x52, 0x29
        })
        Name (NPGV, Buffer (0xE2)
        {
            /* 0000 */   0xF6, 0x5D, 0xD2, 0xDE, 0xF5, 0xEC, 0x79, 0x74,
            /* 0008 */   0x4B, 0x56, 0xE2, 0x00, 0x00, 0x00, 0x01, 0x00,
            /* 0010 */   0x32, 0x37, 0x34, 0x35, 0x39, 0x31, 0x32, 0x35,
            /* 0018 */   0x33, 0x36, 0x38, 0x37, 0x47, 0x65, 0x6E, 0x75,
            /* 0020 */   0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,
            /* 0028 */   0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,
            /* 0030 */   0x66, 0x69, 0x65, 0x64, 0x20, 0x4F, 0x70, 0x74,
            /* 0038 */   0x69, 0x6D, 0x75, 0x73, 0x20, 0x52, 0x65, 0x61,
            /* 0040 */   0x64, 0x79, 0x20, 0x4D, 0x6F, 0x74, 0x68, 0x65,
            /* 0048 */   0x72, 0x62, 0x6F, 0x61, 0x72, 0x64, 0x20, 0x66,
            /* 0050 */   0x6F, 0x72, 0x20, 0x36, 0x35, 0x36, 0x37, 0x32,
            /* 0058 */   0x31, 0x5F, 0x63, 0x70, 0x75, 0x7A, 0x5F, 0x43,
            /* 0060 */   0x4C, 0x45, 0x56, 0x4F, 0x2D, 0x42, 0x34, 0x20,
            /* 0068 */   0x2D, 0x20, 0x22, 0x54, 0x32, 0x3A, 0x57, 0x51,
            /* 0070 */   0x4E, 0x44, 0x39, 0x37, 0x2E, 0x21, 0x4C, 0x4F,
            /* 0078 */   0x5D, 0x4F, 0x42, 0x2D, 0x53, 0x50, 0x3B, 0x2E,
            /* 0080 */   0x29, 0x3B, 0x5B, 0x4F, 0x4F, 0x57, 0x2E, 0x46,
            /* 0088 */   0x3C, 0x26, 0x2A, 0x26, 0x49, 0x39, 0x5A, 0x52,
            /* 0090 */   0x48, 0x54, 0x38, 0x5A, 0x2F, 0x3E, 0x43, 0x5D,
            /* 0098 */   0x58, 0x5A, 0x20, 0x2D, 0x20, 0x43, 0x6F, 0x70,
            /* 00A0 */   0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0x32,
            /* 00A8 */   0x30, 0x30, 0x39, 0x20, 0x4E, 0x56, 0x49, 0x44,
            /* 00B0 */   0x49, 0x41, 0x20, 0x43, 0x6F, 0x72, 0x70, 0x6F,
            /* 00B8 */   0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x41,
            /* 00C0 */   0x6C, 0x6C, 0x20, 0x52, 0x69, 0x67, 0x68, 0x74,
            /* 00C8 */   0x73, 0x20, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
            /* 00D0 */   0x65, 0x64, 0x2D, 0x32, 0x37, 0x34, 0x35, 0x39,
            /* 00D8 */   0x31, 0x32, 0x35, 0x33, 0x36, 0x38, 0x37, 0x28,
            /* 00E0 */   0x52, 0x29
        })
        Name (NPGS, Buffer (0xE6)
        {
            /* 0000 */   0x6C, 0x67, 0xD5, 0xCC, 0x98, 0xFF, 0x4A, 0x45,
            /* 0008 */   0x4B, 0x56, 0xE6, 0x00, 0x00, 0x00, 0x01, 0x00,
            /* 0010 */   0x31, 0x34, 0x38, 0x35, 0x39, 0x37, 0x34, 0x35,
            /* 0018 */   0x36, 0x39, 0x38, 0x35, 0x47, 0x65, 0x6E, 0x75,
            /* 0020 */   0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,
            /* 0028 */   0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,
            /* 0030 */   0x66, 0x69, 0x65, 0x64, 0x20, 0x4F, 0x70, 0x74,
            /* 0038 */   0x69, 0x6D, 0x75, 0x73, 0x20, 0x52, 0x65, 0x61,
            /* 0040 */   0x64, 0x79, 0x20, 0x4D, 0x6F, 0x74, 0x68, 0x65,
            /* 0048 */   0x72, 0x62, 0x6F, 0x61, 0x72, 0x64, 0x20, 0x66,
            /* 0050 */   0x6F, 0x72, 0x20, 0x37, 0x30, 0x38, 0x34, 0x38,
            /* 0058 */   0x32, 0x5F, 0x35, 0x31, 0x33, 0x30, 0x63, 0x20,
            /* 0060 */   0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
            /* 0068 */   0x2D, 0x20, 0x33, 0x25, 0x42, 0x4A, 0x28, 0x22,
            /* 0070 */   0x5F, 0x55, 0x49, 0x47, 0x39, 0x32, 0x5C, 0x5E,
            /* 0078 */   0x2E, 0x5F, 0x53, 0x3E, 0x24, 0x21, 0x4B, 0x3F,
            /* 0080 */   0x3A, 0x4B, 0x2A, 0x5E, 0x5E, 0x58, 0x3E, 0x59,
            /* 0088 */   0x4E, 0x38, 0x3D, 0x37, 0x39, 0x28, 0x2B, 0x40,
            /* 0090 */   0x2A, 0x22, 0x48, 0x55, 0x3E, 0x4E, 0x5D, 0x2C,
            /* 0098 */   0x29, 0x2C, 0x58, 0x4B, 0x2B, 0x42, 0x20, 0x2D,
            /* 00A0 */   0x20, 0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67,
            /* 00A8 */   0x68, 0x74, 0x20, 0x32, 0x30, 0x31, 0x30, 0x20,
            /* 00B0 */   0x4E, 0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43,
            /* 00B8 */   0x6F, 0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69,
            /* 00C0 */   0x6F, 0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52,
            /* 00C8 */   0x69, 0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65,
            /* 00D0 */   0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x31,
            /* 00D8 */   0x34, 0x38, 0x35, 0x39, 0x37, 0x34, 0x35, 0x36,
            /* 00E0 */   0x39, 0x38, 0x35, 0x28, 0x52, 0x29
        })
        Name (NVGS, Buffer (0xE6)
        {
            /* 0000 */   0xFA, 0x2D, 0x93, 0xC3, 0x49, 0x3F, 0xA7, 0x3D,
            /* 0008 */   0x4B, 0x56, 0xE6, 0x00, 0x00, 0x00, 0x01, 0x00,
            /* 0010 */   0x31, 0x34, 0x38, 0x35, 0x39, 0x37, 0x34, 0x35,
            /* 0018 */   0x36, 0x39, 0x38, 0x35, 0x47, 0x65, 0x6E, 0x75,
            /* 0020 */   0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,
            /* 0028 */   0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,
            /* 0030 */   0x66, 0x69, 0x65, 0x64, 0x20, 0x4F, 0x70, 0x74,
            /* 0038 */   0x69, 0x6D, 0x75, 0x73, 0x20, 0x52, 0x65, 0x61,
            /* 0040 */   0x64, 0x79, 0x20, 0x4D, 0x6F, 0x74, 0x68, 0x65,
            /* 0048 */   0x72, 0x62, 0x6F, 0x61, 0x72, 0x64, 0x20, 0x66,
            /* 0050 */   0x6F, 0x72, 0x20, 0x37, 0x30, 0x38, 0x34, 0x38,
            /* 0058 */   0x37, 0x5F, 0x37, 0x31, 0x33, 0x30, 0x63, 0x20,
            /* 0060 */   0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
            /* 0068 */   0x2D, 0x20, 0x2A, 0x2C, 0x3A, 0x32, 0x2F, 0x29,
            /* 0070 */   0x46, 0x5C, 0x31, 0x4C, 0x26, 0x29, 0x47, 0x47,
            /* 0078 */   0x57, 0x46, 0x4A, 0x25, 0x5B, 0x28, 0x33, 0x26,
            /* 0080 */   0x21, 0x33, 0x53, 0x47, 0x47, 0x5F, 0x25, 0x5E,
            /* 0088 */   0x36, 0x3F, 0x22, 0x3E, 0x41, 0x31, 0x52, 0x4F,
            /* 0090 */   0x35, 0x29, 0x30, 0x52, 0x27, 0x45, 0x58, 0x55,
            /* 0098 */   0x52, 0x53, 0x5F, 0x33, 0x52, 0x4D, 0x20, 0x2D,
            /* 00A0 */   0x20, 0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67,
            /* 00A8 */   0x68, 0x74, 0x20, 0x32, 0x30, 0x31, 0x30, 0x20,
            /* 00B0 */   0x4E, 0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43,
            /* 00B8 */   0x6F, 0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69,
            /* 00C0 */   0x6F, 0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52,
            /* 00C8 */   0x69, 0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65,
            /* 00D0 */   0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x31,
            /* 00D8 */   0x34, 0x38, 0x35, 0x39, 0x37, 0x34, 0x35, 0x36,
            /* 00E0 */   0x39, 0x38, 0x35, 0x28, 0x52, 0x29
        })
        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If (LEqual (Arg0, Buffer (0x10)
                    {
                        /* 0000 */   0xD3, 0x73, 0xD8, 0x7E, 0xD0, 0xC2, 0x4F, 0x4E,
                        /* 0008 */   0xA8, 0x54, 0x0F, 0x13, 0x17, 0xB0, 0x1C, 0x2C
                    }))
            {
                Return (One)
            }

            If (LEqual (Arg0, Buffer (0x10)
                    {
                        /* 0000 */   0xF8, 0xD8, 0x86, 0xA4, 0xDA, 0x0B, 0x1B, 0x47,
                        /* 0008 */   0xA7, 0x2B, 0x60, 0x42, 0xA6, 0xB5, 0xBE, 0xE0
                    }))
            {
                If (LNotEqual (Arg1, 0x0100))
                {
                    Return (Buffer (0x04)
                    {
                         0x02, 0x00, 0x00, 0x80
                    })
                }

                Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
                Store (Arg2, _T_0)
                If (LEqual (_T_0, Zero))
                {
                    Return (Buffer (0x04)
                    {
                         0x01, 0x00, 0x03, 0x04
                    })
                }
                Else
                {
                    If (LEqual (_T_0, 0x10))
                    {
                        CreateWordField (Arg3, 0x02, NVVK)
                        If (LEqual (NVVK, 0x564B))
                        {
                            If (LEqual (\NVID, 0x0A72))
                            {
                                Return (NMOP)
                            }

                            If (LEqual (\NVID, 0x0A29))
                            {
                                If (LEqual (\_SB.PCI0.P0P2.SSID, 0x4101))
                                {
                                    Return (NPGE)
                                }
                                Else
                                {
                                    Return (NGE1)
                                }
                            }

                            If (LEqual (\NVID, 0x0A35))
                            {
                                Return (NPGV)
                            }

                            If (LEqual (\NVID, 0x0DF0))
                            {
                                If (LEqual (\_SB.PCI0.P0P2.SSID, 0x5130))
                                {
                                    Return (NPGS)
                                }
                                Else
                                {
                                    Return (NVGS)
                                }
                            }
                        }
                    }
                    Else
                    {
                        If (LEqual (_T_0, 0x11)) {}
                        Else
                        {
                            If (LEqual (_T_0, 0x1A))
                            {
                                If (And (\OEMF, One))
                                {
                                    CreateByteField (Arg3, Zero, UPFG)
                                    CreateByteField (Arg3, 0x03, OPCE)
                                    If (And (UPFG, One))
                                    {
                                        And (OPCE, One, OPD3)
                                    }

                                    Name (TEMP, Buffer (0x04)
                                    {
                                         0x01, 0x00, 0x00, 0x09
                                    })
                                    If (And (\OEMF, 0x10))
                                    {
                                        If (\_SB.PCI0.LPCB.EC.ECOK)
                                        {
                                            If (And (\_SB.PCI0.LPCB.EC.RINF, 0x02))
                                            {
                                                Store (0x19, Index (TEMP, Zero))
                                            }
                                            Else
                                            {
                                                Store (One, Index (TEMP, Zero))
                                            }
                                        }
                                    }
                                    Else
                                    {
                                        Store (Zero, Index (TEMP, 0x03))
                                    }

                                    Return (TEMP)
                                }
                                Else
                                {
                                    Return (Buffer (0x04)
                                    {
                                         0x00
                                    })
                                }
                            }
                        }
                    }
                }
            }

            Return (Buffer (0x04)
            {
                 0x02, 0x00, 0x00, 0x80
            })
        }
    }

    Scope (\_SB)
    {
        Device (WMI1)
        {
            Name (_HID, "PNP0C14")  // _HID: Hardware ID
            Name (_UID, "MXM2")  // _UID: Unique ID
            Name (_WDG, Buffer (0x3C)
            {
                /* 0000 */   0x3C, 0x5C, 0xCB, 0xF6, 0xAE, 0x9C, 0xBD, 0x4E,
                /* 0008 */   0xB5, 0x77, 0x93, 0x1E, 0xA3, 0x2A, 0x2C, 0xC0,
                /* 0010 */   0x4D, 0x58, 0x01, 0x02, 0x57, 0x93, 0x8A, 0xF2,
                /* 0018 */   0x4B, 0xCF, 0x1A, 0x4A, 0x88, 0x93, 0xBB, 0x1F,
                /* 0020 */   0x58, 0xEE, 0xA1, 0xAF, 0xD1, 0x00, 0x01, 0x08,
                /* 0028 */   0x21, 0x12, 0x90, 0x05, 0x66, 0xD5, 0xD1, 0x11,
                /* 0030 */   0xB2, 0xF0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10,
                /* 0038 */   0x58, 0x4D, 0x01, 0x00
            })
            Method (WMMX, 3, NotSerialized)
            {
                CreateDWordField (Arg2, Zero, FUNC)
                If (LEqual (FUNC, 0x4D53445F))
                {
                    If (LGreaterEqual (SizeOf (Arg2), 0x1C))
                    {
                        CreateField (Arg2, 0x20, 0x80, MUID)
                        CreateDWordField (Arg2, 0x14, REVI)
                        CreateDWordField (Arg2, 0x18, SFNC)
                        CreateDWordField (Arg2, 0x1C, ARGD)
                        If (LEqual (And (Arg1, 0xFF), One))
                        {
                            Return (\_SB.PCI0.P0P2.PEGP._DSM (MUID, REVI, SFNC, ARGD))
                        }
                    }
                }

                Return (Zero)
            }

            Name (WQXM, Buffer (0x029C)
            {
                /* 0000 */   0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,
                /* 0008 */   0x8B, 0x02, 0x00, 0x00, 0x0C, 0x08, 0x00, 0x00,
                /* 0010 */   0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,
                /* 0018 */   0x18, 0xD2, 0x83, 0x00, 0x01, 0x06, 0x18, 0x42,
                /* 0020 */   0x10, 0x05, 0x10, 0x8A, 0xE6, 0x80, 0x42, 0x04,
                /* 0028 */   0x92, 0x43, 0xA4, 0x30, 0x30, 0x28, 0x0B, 0x20,
                /* 0030 */   0x86, 0x90, 0x0B, 0x26, 0x26, 0x40, 0x04, 0x84,
                /* 0038 */   0xBC, 0x0A, 0xB0, 0x29, 0xC0, 0x24, 0x88, 0xFA,
                /* 0040 */   0xF7, 0x87, 0x28, 0x09, 0x0E, 0x25, 0x04, 0x42,
                /* 0048 */   0x12, 0x05, 0x98, 0x17, 0xA0, 0x5B, 0x80, 0x61,
                /* 0050 */   0x01, 0xB6, 0x05, 0x98, 0x16, 0xE0, 0x18, 0x92,
                /* 0058 */   0x4A, 0x03, 0xA7, 0x04, 0x96, 0x02, 0x21, 0xA1,
                /* 0060 */   0x02, 0x94, 0x0B, 0xF0, 0x2D, 0x40, 0x3B, 0xA2,
                /* 0068 */   0x24, 0x0B, 0xB0, 0x0C, 0x23, 0x02, 0x8F, 0x82,
                /* 0070 */   0xA1, 0x71, 0x68, 0xEC, 0x30, 0x2C, 0x13, 0x4C,
                /* 0078 */   0x83, 0x38, 0x8C, 0xB2, 0x91, 0x45, 0x60, 0xDC,
                /* 0080 */   0x4E, 0x05, 0xC8, 0x15, 0x20, 0x4C, 0x80, 0x78,
                /* 0088 */   0x54, 0x61, 0x34, 0x07, 0x45, 0xE0, 0x42, 0x63,
                /* 0090 */   0x64, 0x40, 0xC8, 0xA3, 0x00, 0xAB, 0xA3, 0xD0,
                /* 0098 */   0xA4, 0x12, 0xD8, 0xBD, 0x00, 0x8D, 0x02, 0xB4,
                /* 00A0 */   0x09, 0x70, 0x28, 0x40, 0xA1, 0x00, 0x6B, 0x18,
                /* 00A8 */   0x72, 0x06, 0x21, 0x5B, 0xD8, 0xC2, 0x68, 0x50,
                /* 00B0 */   0x80, 0x45, 0x14, 0x8D, 0xE0, 0x2C, 0x2A, 0x9E,
                /* 00B8 */   0x93, 0x50, 0x02, 0xDA, 0x1B, 0x82, 0xF0, 0x8C,
                /* 00C0 */   0xD9, 0x18, 0x9E, 0x10, 0x83, 0x54, 0x86, 0x21,
                /* 00C8 */   0x88, 0xB8, 0x11, 0x8E, 0xA5, 0xFD, 0x41, 0x10,
                /* 00D0 */   0xF9, 0xAB, 0xD7, 0xB8, 0x1D, 0x69, 0x34, 0xA8,
                /* 00D8 */   0xB1, 0x26, 0x38, 0x76, 0x8F, 0xE6, 0x84, 0x3B,
                /* 00E0 */   0x17, 0x20, 0x7D, 0x6E, 0x02, 0x39, 0xBA, 0xD3,
                /* 00E8 */   0xA8, 0x73, 0xD0, 0x64, 0x78, 0x0C, 0x2B, 0xC1,
                /* 00F0 */   0x7F, 0x80, 0x4F, 0x01, 0x78, 0xD7, 0x80, 0x9A,
                /* 00F8 */   0xFE, 0xC1, 0x33, 0x41, 0x70, 0xA8, 0x21, 0x7A,
                /* 0100 */   0xD4, 0xE1, 0x4E, 0xE0, 0xBC, 0x8E, 0x84, 0x41,
                /* 0108 */   0x1C, 0xD1, 0x71, 0x63, 0x67, 0x75, 0x32, 0x07,
                /* 0110 */   0x5D, 0xAA, 0x00, 0xB3, 0x07, 0x00, 0x0D, 0x2E,
                /* 0118 */   0xC1, 0x69, 0x9F, 0x49, 0xE8, 0xF7, 0x80, 0xF3,
                /* 0120 */   0xE9, 0x79, 0x6C, 0x6C, 0x10, 0xA8, 0x91, 0xF9,
                /* 0128 */   0xFF, 0x0F, 0xED, 0x41, 0x9E, 0x56, 0xCC, 0x90,
                /* 0130 */   0xCF, 0x02, 0x87, 0xC5, 0xC4, 0x1E, 0x19, 0xE8,
                /* 0138 */   0x78, 0xC0, 0x7F, 0x00, 0x78, 0x34, 0x88, 0xF0,
                /* 0140 */   0x66, 0xE0, 0xF9, 0x9A, 0x60, 0x50, 0x08, 0x39,
                /* 0148 */   0x19, 0x0F, 0x4A, 0xCC, 0xF9, 0x80, 0xCC, 0x25,
                /* 0150 */   0xC4, 0x43, 0xC0, 0x31, 0xC4, 0x08, 0x7A, 0x46,
                /* 0158 */   0x45, 0x23, 0x6B, 0x22, 0x3E, 0x03, 0x78, 0xDC,
                /* 0160 */   0x96, 0x05, 0x42, 0x09, 0x0C, 0xEC, 0x73, 0xC3,
                /* 0168 */   0x3B, 0x84, 0x61, 0x71, 0xA3, 0x09, 0xEC, 0xF3,
                /* 0170 */   0x85, 0x05, 0x0E, 0x0A, 0x05, 0xEB, 0xBB, 0x42,
                /* 0178 */   0xCC, 0xE7, 0x81, 0xE3, 0x3C, 0x60, 0x0B, 0x9F,
                /* 0180 */   0x28, 0x01, 0x3E, 0x24, 0x8F, 0x06, 0xDE, 0x20,
                /* 0188 */   0xE1, 0x5B, 0x3F, 0x02, 0x10, 0xE0, 0x27, 0x06,
                /* 0190 */   0x13, 0x58, 0x1E, 0x30, 0x7A, 0x94, 0xF6, 0x2B,
                /* 0198 */   0x00, 0x21, 0xF8, 0x8B, 0xC5, 0x53, 0xC0, 0xEB,
                /* 01A0 */   0x40, 0x84, 0x63, 0x81, 0x29, 0x72, 0x6C, 0x68,
                /* 01A8 */   0x78, 0x7E, 0x70, 0x88, 0x1E, 0xF5, 0x5C, 0xC2,
                /* 01B0 */   0x1F, 0x4D, 0x94, 0x53, 0x38, 0x1C, 0x1F, 0x39,
                /* 01B8 */   0x8C, 0x10, 0xFE, 0x49, 0xE3, 0xC9, 0xC3, 0x9A,
                /* 01C0 */   0xEF, 0x00, 0x9A, 0xD2, 0x5B, 0xC0, 0xFB, 0x83,
                /* 01C8 */   0x47, 0x80, 0x11, 0x20, 0xE1, 0x68, 0x82, 0x89,
                /* 01D0 */   0x7C, 0x3A, 0x01, 0xD5, 0xFF, 0xFF, 0x74, 0x02,
                /* 01D8 */   0xB8, 0xBA, 0x01, 0x14, 0x37, 0x6A, 0x9D, 0x49,
                /* 01E0 */   0x7C, 0x2C, 0xF1, 0xAD, 0xE4, 0xBC, 0x43, 0xC5,
                /* 01E8 */   0x7F, 0x93, 0x78, 0x3A, 0xF1, 0x34, 0x1E, 0x4C,
                /* 01F0 */   0x42, 0x44, 0x89, 0x18, 0x21, 0xA2, 0xEF, 0x27,
                /* 01F8 */   0x46, 0x08, 0x15, 0x31, 0x6C, 0xA4, 0x37, 0x80,
                /* 0200 */   0xE7, 0x13, 0xE3, 0x84, 0x08, 0xF4, 0x74, 0xC2,
                /* 0208 */   0x42, 0x3E, 0x34, 0xA4, 0xE1, 0x74, 0x02, 0x50,
                /* 0210 */   0xE0, 0xFF, 0x7F, 0x3A, 0x81, 0x1F, 0xF5, 0x74,
                /* 0218 */   0x82, 0x1E, 0xAE, 0x4F, 0x19, 0x18, 0xE4, 0x03,
                /* 0220 */   0xF2, 0xA9, 0xC3, 0xF7, 0x1F, 0x13, 0xF8, 0x78,
                /* 0228 */   0xC2, 0x45, 0x1D, 0x4F, 0x50, 0xA7, 0x07, 0x1F,
                /* 0230 */   0x4F, 0xD8, 0x19, 0xE1, 0x2C, 0x1E, 0x03, 0x7C,
                /* 0238 */   0x3A, 0xC1, 0xDC, 0x13, 0x7C, 0x3A, 0x01, 0xDB,
                /* 0240 */   0x68, 0x60, 0x1C, 0x4F, 0xC0, 0x77, 0x74, 0xC1,
                /* 0248 */   0x1D, 0x4F, 0xC0, 0x30, 0x18, 0x18, 0xE7, 0x13,
                /* 0250 */   0xE0, 0x31, 0x5E, 0xDC, 0x31, 0xC0, 0x43, 0xE0,
                /* 0258 */   0x03, 0x78, 0xDC, 0x38, 0x3D, 0x2B, 0x9D, 0x14,
                /* 0260 */   0xF2, 0x24, 0xC2, 0x07, 0x85, 0x39, 0xB0, 0xE0,
                /* 0268 */   0x14, 0xDA, 0xF4, 0xA9, 0xD1, 0xA8, 0x55, 0x83,
                /* 0270 */   0x32, 0x35, 0xCA, 0x34, 0xA8, 0xD5, 0xA7, 0x52,
                /* 0278 */   0x63, 0xC6, 0xCE, 0x19, 0x0E, 0xF8, 0x10, 0xD0,
                /* 0280 */   0x89, 0xC0, 0xF2, 0x9E, 0x0D, 0x02, 0xB1, 0x0C,
                /* 0288 */   0x0A, 0x81, 0x58, 0xFA, 0xAB, 0x45, 0x20, 0x0E,
                /* 0290 */   0x0E, 0xA2, 0xFF, 0x3F, 0x88, 0x23, 0xD2, 0x0A,
                /* 0298 */   0xC4, 0xFF, 0x7F, 0x7F
            })
        }
    }
}

